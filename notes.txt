Steps to manually get Gud working:
- Add the directory containing the shell script (src/gud) to PATH ---> export PATH=$PATH:/home/hanif/gud/src
    - This allows "gud" to work as a command, that will run the gud script as if you did ./gud

Ideas:
- Have an in-built means to locate all/local other gud repositories. In the event that a user is
in the wrong directory when trying to use gud commands.
    - Something like: "You are not in a Gud directory. Maybe you thought you were in <file_path_to_nearest_gud_dir>?"


gud init
- use "questionary" (https://pypi.org/project/questionary/) for the interactive selection screen(s)

gud status
- hash all files in the working dir (except "ignored" ones) and compare to the current index (.gud/index)
(which represents the latest "tree"), and match each file to a file in the index
    - if a file is in the working dir but not the index, label as "untracked"
    - if a file is in the working dir AND index, but they do not match hashes/permissons, label as "changed"
    - if a file is in the working dir AND index, and is indentical, do not list/label it

gud add <file>
- tldr: update the current index (.gud/index)
    - if the file is already in the index, update its hash + permissions
    - if the file is not in the index, add it as a row

gud commit
- tldr: save the current index as a "tree" object, then create a commit object, containing the tree's hash,
the hash of the current HEAD (listed under "parent" commit), and the authorship details, then hash this commit file
and name it by its hash. then update the HEAD to the hash of this commit

Useful notes:
- `with open()...` will open a file relative to the working directory where the initial script was invoked
    - NOT necessarily the directory where the (imported) module lies


Sticking points:
- How should the user install this?


-- Bundling this as a package: --

# do this only once
pip install setuptools wheel twine

# do these each time you want to update the package and pip install it
python setup.py sdist bdist_wheel
pip install dist/<package>.whl

## quick command for the above two

linux:
rm -rf .gud/ && python setup.py sdist bdist_wheel && pip install dist/gud_finahdinner-0.1-py3-none-any.whl --force-reinstall

windows (cmd):
rmdir /s /q .gud && python setup.py sdist bdist_wheel && pip install dist\gud_finahdinner-0.1-py3-none-any.whl --force-reinstall

-- Docker --

# each time you change the code
docker build -t gud-dev .

# running the container with an interactive shell
docker run -it gud-dev sh


# Compression levels:
Diminishing returns:

Example with a .py file:
    size_before=2268
    Compressed size at level 0: 2279
    Compressed size at level 1: 841
    Compressed size at level 2: 824
    Compressed size at level 3: 824
    Compressed size at level 4: 798
    Compressed size at level 5: 791
    Compressed size at level 6: 791
    Compressed size at level 7: 791
    Compressed size at level 8: 791
    Compressed size at level 9: 791


# TODO - implement .gud/refs/heads - 1 file per branch (might as well have a main branch even if i dont allow branching)
- stores the commit hash of the HEAD of the branch

the index file format:
- the mode (first number, usually 100644) is in OCTAL. it maps to 33188 in decimal (which is
what is returned when you do `os.stat(file_path).st_mode`)


IMPORTANT TODO (priority HIGH to LOW):
    - when gud status is called, it should first and foremost generate a directory tree (with the
    structure above), and then determine the set of all files that are ignored, then it should
    go through every file in the working dir, hash it (WITHOUT WRITING TO FILE),
    and look it up in the directory tree (if the file is ignored, it should skip this part)
        - if the file path doesn't exist in the directory tree, the file should be labelled as "untracked"
        - if the file path DOES exist in the directory tree, and the hash is DIFFERENT, then it should appear
        as "changed"
        - if the file path DOES exist in the directory tree, and the hash is the same, then it shouldn't appear
        in the gud status output
        - if any file/dir in the directory tree has not been traversed by the time all files in the working dir have
        been checked, then these files/dirs should be marked as "deleted"
    - account for deleted files when doing gud stage add/remove
        - this means that deleted files/folders should appear in the autocomplete in questionary
        probably need to add a filter or something to the questionary.path() func
    - create a dummy project directory that should be used for further testing
        - each time I test, I can copy the contents of this directory into a tmp/ folder, then run the gud testing
        - reason to do this is so that I don't mess up the actual git repository if something goes wrong
    - make the stdout outputs coloured!!

EDGE CASES:
    - if a user is checking out a previous commit, and is in a detached head state:
        - let them make changes and make commits
        - but as soon as they want to switch branch (eg back to master),
        prevent them, and issue a warning that they should create a new branch before doing so
        - after they make a new branch, let them switch branches


DONE:
    - when building the directory tree (nested dicts etc), instead of storing None for the files,
    store their important info (mode, hash) in a list. so that dict = directory, list = file/blob